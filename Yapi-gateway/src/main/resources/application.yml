server:
  port: 8090

#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: after_route
#          uri: https://yupi.icu
#          predicates:
#            - After=2017-01-20T17:42:47.789-07:00[America/Denver]

#spring:
#  cloud:
#    gateway:
#      routes:
#        # 将请求路径以/api/**开头的请求转发到目标URI https://yupi.icu
#        - id: path_route
#          uri: https://yupi.icu
#          predicates:
#            - Path=/api/**
#        # 将请求路径以/baidu/**开头的请求转发到目标URI https://baidu.com
#        - id: path_route2
#          uri: https://baidu.com
#          predicates:
#            - Path=/baidu/**

#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: add_request_header_route
#          uri: http://localhost:8123
#          predicates:
#            - Path=/api/**
#          filters:
#            - AddRequestHeader=yu, swag
#            - AddRequestParameter=name, dog
#            - name: CircuitBreaker
#              args:
#                name: myCircuitBreaker
#                fallbackUri: forward:/fallback
#        - id: yu-fallback
#          uri: https://yupi.icu
#          predicates:
#           - Path=/fallback
#


spring:
  cloud:
    gateway:
      default-filters:
        - AddResponseHeader=source, yu
      routes:
        # 定义了一个名为"api_route"的路由规则,该规则将匹配以"/api/"开头的路径,例如"/api/user",
        # 并将这些请求转发到"http://localhost:8123"这个目标地址
        - id: api_route
          uri: http://localhost:8123
          predicates:
            - Path=/api/**
logging:
  level:
    org:
      springframework:
        cloud:
          gateway: trace

# 以下配置指定了应用的名称、使用的协议（Dubbo）、注册中心的类型（Nacos）和地址
dubbo:
  application:
    # 设置应用的名称
    name: dubbo-springboot-demo-provider
  # 指定使用 Dubbo 协议，且端口设置为 -1，表示随机分配可用端口
  protocol:
    name: dubbo
    port:  22223
  registry:
    # 配置注册中心为 Nacos，使用的地址是 nacos://localhost:8848
    id: nacos-registry
    address: nacos://localhost:8848